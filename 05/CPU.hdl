// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])	  The value recieved
        instruction[16], // Instruction for execution				  A or C instruction
        reset;           // Signals whether to re-start the current	  Reset or not
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value outputs 						  data
        writeM,          // Write to M? 							  load
        addressM[15],    // Address in data memory (of M)			  mem adr
        pc[15];          // address of next Instruction 			  ROM adr for next

    PARTS:
    // Put your code here:
    Mux16(a = instruction, b = ALUResult, sel = instruction[15], out = outToARegister);
    Register(in = outToARegister, load = instruction[6], out = addressM); //A REGISTER
    Mux16(a = addressM, b = inM, sel = instruction[12], out = AOrMResult);
    Register(in = ALUResult, load = instruction[4], out = DRegisterResult); //D REGISTER
    ALU(x = addressM, y = DRegisterResult, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = ALUResult, zr = ALUz, ng = ALUn);
    And16(a = ALUResult, b = ALUResult, out = outM); //Just had to get ALUResult to outM
    And(a = instruction[3], b = True, out = writeM); //Test if we're writingM or not
    And16(a = addressM, b = addressM, out = addressM);

    Not(in = ALUz, out = NotALUz);
    Not(in = ALUn, out = NotALUn);
    And(a = NotALUn, b = NotALUz, out = JGTb);
    Or(a = ALUn, b = ALUz, out = JLEg);

    Mux8Way(a = False, b = JGTb, c = ALUz, d = NotALUn, e = ALUn, f = NotALUz, g = JLEg, h = True, sel[0] = instruction[2], sel[1] = instruction[1], sel[2] = instruction[0], out = jumpResult);

    Not(in = jumpResult, out = incResult);

    PC(in = addressM, load = jumpResult, inc = incResult, reset = reset, out = pc);
}
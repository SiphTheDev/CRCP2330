class LinkedList {
	field Node head;

	constructor LinkedList new(){
		let head = null;
		return this;
	}

	method boolean isEmpty(){
		if(head = null){return true;}
		else{return false;}
	}

	method void add(int dataX, int dataY){ //adds new node in first position 
		var Node newNode;
		if(isEmpty()){
			let newNode = Node.new(dataX, dataY, null); //is this let or field or var?
			let head = newNode;
		}
		else{
			let newNode = Node.new(dataX, dataY, head);
			let head = newNode;
		}
		return;
	}

	method void clear(){					
		var Node nextNode;
		while(~(head.getNext() = null)){
			let nextNode = head.getNext();
			do head.setNext(nextNode.getNext());
			do nextNode.dispose();
		}
		return;
	}
	
	method void drawTrail(){			
		var Node currentNode;
		var Node nextNode;
		let currentNode = head;
		let nextNode = head.getNext();

		while(~(nextNode = null)){
			do currentNode.draw();
			let currentNode = nextNode;
			let nextNode = currentNode.getNext();
		}
		return;
	}

	method void dispose(){
		do clear();
		do Memory.deAlloc(this);
		return;
	}
	
}
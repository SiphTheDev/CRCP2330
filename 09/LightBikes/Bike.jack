class Bike{
	//field variables
	field int x;
	field int y;
	field boolean isNotCollided;
	
	//constructor
	constructor Bike new(int xPos, int yPos){
		let x = xPos;
		let y = yPos;
		let isNotCollided = true;
		return this;
	}

	//movement Methods     
	method void moveUp(int orientation){
		let y = y-1;							//move & check collision
		do collisionCheck(orientation);
		let y = y-1;
		do collisionCheck(orientation);

		do Screen.setColor(false);
		do Screen.drawLine(x, y-6, x-3, y+3);	//draw "bike"
		do Screen.drawLine(x-3, y+3, x+3, y+3);
		do Screen.drawLine(x+3, y+3, x, y-6);
		//do Screen.drawPixel(x,y-4);			//leave path (2 pixels to account for movement speed). Needs to be adding path to an array, do it in a separate method.
		//do Screen.drawPixel(x,y-5); 				
		return;
	}

	method void moveRight(int orientation){
		let x = x+1;
		//do collisionCheck(orientation);
		let x = x+1;
		//do collisionCheck(orientation);

		do Screen.setColor(false);
		do Screen.drawLine(x+6, y, x-3, y-3);
		do Screen.drawLine(x-3, y-3, x-3, y+3);
		do Screen.drawLine(x-3, y+3, x+6, y);
		//do Screen.drawPixel(x-4,y);
		//do Screen.drawPixel(x-5,y);
		return;
	}

	method void moveDown(int orientation){
		let y = y+1;
		//do collisionCheck(orientation);
		let y = y+1;
		//do collisionCheck(orientation);

		do Screen.setColor(false);
		do Screen.drawLine(x, y+6, x-3, y-3);
		do Screen.drawLine(x-3, y-3, x+3, y-3);
		do Screen.drawLine(x+3, y-3, x, y+6);
		//do Screen.drawPixel(x,y+4);
		//do Screen.drawPixel(x,y+5);
		return;
	}

	method void moveLeft(int orientation){
		let x = x-1;
		//do collisionCheck(orientation);
		let x = x-1;
		//do collisionCheck(orientation);

		do Screen.setColor(false);
		do Screen.drawLine(x-6, y, x+3, y-3);
		do Screen.drawLine(x+3, y-3, x+3, y+3);
		do Screen.drawLine(x+3, y+3, x-6, y);
		//do Screen.drawPixel(x+4,y);
		//do Screen.drawPixel(x+5,y);
		return;
	}

	method void collisionCheck(int orientation){
		//field boolean isNotCollided;
		var boolean peekedColor;


		if(orientation = 0){let peekedColor = Memory.peek((16384+((y-7)*32)+(x/16)+(x%16)));} //Pixel Above
		if(orientation = 1){let peekedColor = Memory.peek((16384+(y*32)+((x+7)/16)+((x+7)%16)));} //Pixel to Right
		if(orientation = 2){let peekedColor = Memory.peek((16384+((y+7)*32)+(x/16)+(x%16)));} //Pixel Below
		if(orientation = 3){let peekedColor = Memory.peek((16384+(y*32)+((x-7)/16)+((x-7)%16)));} //Pixel to Left

		let isNotCollided = peekedColor;
		return;
	}

	//If have time to clean up code, consider consolidating 1 move method, which receives "orientation," then passes it to three different methods: move, draw, and addPath, which have simple if statements about what to do next, just so you don't have 4, long, similar methods.

	//dispose
}

/// need the local key var, and separate draws
class Bike{
	//field variables
	field int x;
	field int y;
	field int originX;
	field int originY;
	field boolean isNotCollided;
	
	//constructor
	constructor Bike new(int xPos, int yPos){
		let x = xPos;
		let y = yPos;
		let originX = xPos;
		let originY = yPos;
		let isNotCollided = true;
		return this;
	}

	//movement Methods 
	method void moveUp(int orientation, LinkedList Trail){
		let y = y-1;							//move & check collision
		do collisionCheck(orientation);
		let y = y-1;
		do collisionCheck(orientation);
		let y = y-1;
		do collisionCheck(orientation);
		let y = y-1;
		do collisionCheck(orientation);

		do Screen.setColor(false);				//draw "bike"
		do Screen.drawLine(x, y-6, x-3, y+3);	
		do Screen.drawLine(x-3, y+3, x+3, y+3);
		do Screen.drawLine(x+3, y+3, x, y-6);

		do Trail.add(x,y+1);					//leave path (2 pixels to account for movement speed). 
		do Trail.add(x,y+2);
		do Trail.add(x,y+3);
		do Trail.add(x,y+4);			
		return;
	}

	method void moveRight(int orientation, LinkedList Trail){
		let x = x+1;
		do collisionCheck(orientation);
		let x = x+1;
		do collisionCheck(orientation);
		let x = x+1;
		do collisionCheck(orientation);
		let x = x+1;
		do collisionCheck(orientation);

		do Screen.setColor(false);
		do Screen.drawLine(x+6, y, x-3, y-3);
		do Screen.drawLine(x-3, y-3, x-3, y+3);
		do Screen.drawLine(x-3, y+3, x+6, y);

		do Trail.add(x-1,y);
		do Trail.add(x-2,y);
		do Trail.add(x-3,y);
		do Trail.add(x-4,y);
		return;
	}

	method void moveDown(int orientation, LinkedList Trail){
		let y = y+1;
		do collisionCheck(orientation);
		let y = y+1;
		do collisionCheck(orientation);
		let y = y+1;
		do collisionCheck(orientation);
		let y = y+1;
		do collisionCheck(orientation);

		do Screen.setColor(false);
		do Screen.drawLine(x, y+6, x-3, y-3);
		do Screen.drawLine(x-3, y-3, x+3, y-3);
		do Screen.drawLine(x+3, y-3, x, y+6);

		do Trail.add(x,y-1);
		do Trail.add(x,y-2);
		do Trail.add(x,y-3);
		do Trail.add(x,y-4);
		return;
	}

	method void moveLeft(int orientation, LinkedList Trail){
		let x = x-1;
		do collisionCheck(orientation);
		let x = x-1;
		do collisionCheck(orientation);
		let x = x-1;
		do collisionCheck(orientation);
		let x = x-1;
		do collisionCheck(orientation);

		do Screen.setColor(false);
		do Screen.drawLine(x-6, y, x+3, y-3);
		do Screen.drawLine(x+3, y-3, x+3, y+3);
		do Screen.drawLine(x+3, y+3, x-6, y);

		do Trail.add(x+1,y);
		do Trail.add(x+2,y);
		do Trail.add(x+3,y);
		do Trail.add(x+4,y);
		return;
	}
	
	method void collisionCheck(int orientation){ //Checks the color of the pixel imediately ahead of the ship. If white, sets isNotCollided to false;
		var int word;	
		var int bit;	
		var int memAdr; 
		var int memVal;
		var int binPos;
		var int adjX;	
		var int adjY;

		if(isNotCollided){
			if(orientation = 0){
				let adjX = x;
				let adjY = y-7;
			} 
			if(orientation = 1){
				let adjX = x+7;
				let adjY = y;
			} 
			if(orientation = 2){
				let adjX = x;
				let adjY = y+7;
			} 
			if(orientation = 3){
				let adjX = x-7;
				let adjY = y;
			} 

			let word = adjX/16;
			let bit = adjX-(word*16);
			let memAdr = (16384+((adjY*32) + word));
			let memVal = Memory.peek(memAdr);
			let binPos = power(bit);

			if((~memVal) & binPos){
				let isNotCollided = false;
			}
		}
		return;
	}
	
	method boolean hasItCollided(){ //Essentially a getter for the main program to access isNotCollided.
		return isNotCollided;
	}

	method int power(int exp) { //takes an in put and gives you 2^thatInput
		var int xp;	
		var int n;
		let xp = exp;
		let n = 1;

		if(xp = 0){
			return 1;
		}
		else{
			while(xp >0){
				let n = n+n; 
				let xp = xp -1;
			}
		}
		return n;
	}

	method void resetBike(){
		let x = originX;
		let y = originY;
		let isNotCollided = true;
		return;
	}

	method void dispose(){
		do Memory.deAlloc(this);
		return;
	}
	//when you refactor code, consider consolidating 1 move (or maybe "act"/"goR/L/U/D") method, which receives "orientation," then passes it to three different methods: move, draw, and addPath, which have simple if statements about what to do next, just so you don't have 4, long, similar methods.
}
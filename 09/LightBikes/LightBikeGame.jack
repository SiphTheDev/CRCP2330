class LightBikeGame{
	// field variables
		//Create Bike Obj
		field Bike player;
		field int orientation;
		field boolean hasCrashed;

		//field int temp;
		//Make a pathPixel array(linked list - see book)

	// Constructor
	constructor LightBikeGame new(){
		let player = Bike.new(205, 224);
		let orientation = 0; //0 = Up, 1 = Right, 2 = Down, 3 = Left
		let hasCrashed = false;
		return this;
	}

	//Main Game Loop
	method void run(){
		var boolean exit;

		let exit = false;

		do drawInterface();

		while(~exit){
			do refreshInterface();
			//let temp = player.mod(7,5);

			if(Keyboard.keyPressed() = 131){do move(131);} //UpArrow     			
			if(Keyboard.keyPressed() = 132){do move(132);} //RightArrow
			if(Keyboard.keyPressed() = 133){do move(133);} //DownArrow				
			if(Keyboard.keyPressed() = 130){do move(130);} //LeftArrow					
			if(Keyboard.keyPressed() = 0){do move(0);} 	   //Continue if not other keys pressed					
			if(Keyboard.keyPressed() = 81){let exit = true;} //Q exits the game
			else{}

			do resetGameCheck();
			
			do Sys.wait(30);
			}
		return;
	}

	method void move(int key){
		if(key = 131){ //UP
			if((orientation = 0) | (orientation = 1) | (orientation = 3)){
				let orientation = 0;
				do player.moveUp(orientation);
			}
		}
		if(key = 132){ //RIGHT //BUG: freezes after turning: cause, once it's orientation is flipped, it is no longer accounted for. Need a third if for forwards, basically.
			if((orientation = 0) | (orientation = 1) | (orientation = 2)){
				let orientation = 1;
				do player.moveRight(orientation);		
			}
		}
		if(key = 133){ //DOWN
			if((orientation = 1) | (orientation = 2) | (orientation = 3)){
				let orientation = 2;
				do player.moveDown(orientation);
			}
		}
		if(key = 130){ //LEFT
			if((orientation = 0) | (orientation = 2)| (orientation = 3)){
				let orientation = 3;
				do player.moveLeft(orientation);				
			}
		}
		if(key = 0){
			if(orientation = 0){ do player.moveUp(orientation); }
			if(orientation = 1){ do player.moveRight(orientation); }
			if(orientation = 2){ do player.moveDown(orientation); }
			if(orientation = 3){ do player.moveLeft(orientation); }
		}
		//do player.collisionCheck(orientation); //doesn't need pixel array, as just verifys B/W, not reason for color.
		else{}
		return;
	}
	
	method void resetGameCheck(){ 
		//clear pixel array
		
		do Output.printString("Game Over");
		do Output.moveCursor(9,6);
		do Sys.wait(2000); //optional, make char blink every 500(draw it, wait 500, cover it, wait 500, etc).
		//let player.x = 205; //Just make a resetpositon method in Bike
		//let player.y = 224;
		
		//If there is a foe, up foes score, and boost your score when they crash?
		return;
	}

	method void drawInterface(){ //TODO tweak this for aesthetics & to actually track numbers if have time to add reset function.
		do Output.printString("Score");
		//do Output.moveCursor(6,0);
		//do Output.printString("Lives");
		do Output.moveCursor(9,0);
		do Output.printString("Controls");
		return;
	}

	method void refreshInterface(){
		do Screen.setColor(true);
		//do Screen.drawRectangle(0,0,511, 255);
		do Screen.drawRectangle(129,33,479,223); 	//Game Area
		do Screen.drawRectangle(128,0,480,31); 		//Borders
		do Screen.drawRectangle(128,225,480,255);
		do Screen.drawRectangle(96,0,127,255);
		do Screen.drawRectangle(481,0,511,255);
		return;
	}








		// Take in inputs - DONE
		// Movement - DONE
		// Draw - do this in the movement! - DONE
		// Collision Check
		// Path array & refresh
		// Dispose
}
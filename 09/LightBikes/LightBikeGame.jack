class LightBikeGame{
	// field variables
		
		field Bike player;		//Create Bike Obj
		field int orientation;
		field boolean hasCrashed;
		field LinkedList PixelPath;

																//TODO Make a pathPixel array(linked list - see book)

	// Constructor
	constructor LightBikeGame new(){
		let player = Bike.new(233, 224);
		let orientation = 0; //0 = Up, 1 = Right, 2 = Down, 3 = Left
		let hasCrashed = false;
		return this;
	}

	//Main Game Loop
	method void run(){
		var boolean exit;

		let exit = false;

		do drawInterface();

		while(~exit){
			do refreshInterface();

			if(Keyboard.keyPressed() = 131){do move(131);} 		//UpArrow     			
			if(Keyboard.keyPressed() = 132){do move(132);} 		//RightArrow
			if(Keyboard.keyPressed() = 133){do move(133);} 		//DownArrow				
			if(Keyboard.keyPressed() = 130){do move(130);} 		//LeftArrow					
			if(Keyboard.keyPressed() = 0){do move(0);} 	   		//Continue if not other keys pressed					
			if(Keyboard.keyPressed() = 81){let exit = true;} 	//Q exits the game
			else{}

			do resetGameCheck();
			
			do Sys.wait(30);
			}
		return;
	}

	method void move(int key){
		if(key = 131){ //UP
			if((orientation = 0) | (orientation = 1) | (orientation = 3)){
				let orientation = 0;
				do player.moveUp(orientation, PixelPath);
			}
		}
		if(key = 132){ //RIGHT 
			if((orientation = 0) | (orientation = 1) | (orientation = 2)){
				let orientation = 1;
				do player.moveRight(orientation, PixelPath);		
			}
		}
		if(key = 133){ //DOWN
			if((orientation = 1) | (orientation = 2) | (orientation = 3)){
				let orientation = 2;
				do player.moveDown(orientation, PixelPath);
			}
		}
		if(key = 130){ //LEFT
			if((orientation = 0) | (orientation = 2)| (orientation = 3)){
				let orientation = 3;
				do player.moveLeft(orientation, PixelPath);				
			}
		}
		if(key = 0){
			if(orientation = 0){ do player.moveUp(orientation, PixelPath); }
			if(orientation = 1){ do player.moveRight(orientation, PixelPath); }
			if(orientation = 2){ do player.moveDown(orientation, PixelPath); }
			if(orientation = 3){ do player.moveLeft(orientation, PixelPath); }
		}
		else{}
		return;
	}
	
	method void resetGameCheck(){ 
														//TODO clear pixel array
		if(~player.hasItCollided()){ 
			do Output.moveCursor(9,32);
			do Output.printString("Game Over");
			do PixelPath.clear();
			/*do refreshInterface();					//TODO implement a separate draw method while refactoring, which can then be called here.
			do Sys.wait(500); 
			do player.draw(orientation);
			//do Output.printString("Game Over");
			do Sys.wait(500);//optional, make char blink every 500(draw it, wait 500, cover it, wait 500, etc).
			do refreshInterface();
			do Sys.wait(500); 
			do player.draw(orientation);
			//do Output.printString("Game Over");
			do Sys.wait(500);
			do refreshInterface();
			*/
			do Sys.wait(200);
			let orientation = 0;
			do player.resetBike();
		
			//TODO: If there is a foe, up foes score, and boost your score when they crash?
		}
		return;
	}

	method void drawInterface(){ //TODO tweak this for aesthetics & to actually track numbers if have time to add reset function.
		do Output.printString("Score");
		do Output.moveCursor(9,0);
		do Output.printString("Controls");
		return;
	}

	method void refreshInterface(){
		do Screen.setColor(true);
		//do Screen.drawRectangle(0,0,511, 255);
		do Screen.drawRectangle(129,33,479,223); 	//Center
		do Screen.drawRectangle(128,0,480,31); 		//top
		do Screen.drawRectangle(128,225,480,255); 	//bottom
		do Screen.drawRectangle(96,0,127,255);
		do Screen.drawRectangle(481,0,511,255);
		do PixelPath.drawTrail(); //refresh the light trailing the bikes.
		return;
	}

	method void dispose(){
		do player.dispose();
		do PixelPath.dispose();
		do Memory.deAlloc(this);
		return;
	}






		// Take in inputs - DONE
		// Movement - DONE
		// Draw - do this in the movement! - DONE
		// Collision Check - DONE
		// Path array & refresh
		// Dispose
}
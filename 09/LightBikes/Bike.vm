function Bike.new 0
push constant 5
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 0
push argument 1
pop this 1
push argument 0
pop this 2
push argument 1
pop this 3
push constant 0
not
pop this 4
push pointer 0
return
function Bike.moveUp 0
push argument 0
pop pointer 0
push this 1
push constant 1
sub
pop this 1
push pointer 0
push argument 1
call Bike.collisionCheck 2
pop temp 0
push this 1
push constant 1
sub
pop this 1
push pointer 0
push argument 1
call Bike.collisionCheck 2
pop temp 0
push constant 0
call Screen.setColor 1
pop temp 0
push this 0
push this 1
push constant 6
sub
push this 0
push constant 3
sub
push this 1
push constant 3
add
call Screen.drawLine 4
pop temp 0
push this 0
push constant 3
sub
push this 1
push constant 3
add
push this 0
push constant 3
add
push this 1
push constant 3
add
call Screen.drawLine 4
pop temp 0
push this 0
push constant 3
add
push this 1
push constant 3
add
push this 0
push this 1
push constant 6
sub
call Screen.drawLine 4
pop temp 0
push argument 2
push this 0
push this 1
push constant 4
add
call LinkedList.add 3
pop temp 0
push argument 2
push this 0
push this 1
push constant 5
add
call LinkedList.add 3
pop temp 0
push constant 0
return
function Bike.moveRight 0
push argument 0
pop pointer 0
push this 0
push constant 1
add
pop this 0
push pointer 0
push argument 1
call Bike.collisionCheck 2
pop temp 0
push this 0
push constant 1
add
pop this 0
push pointer 0
push argument 1
call Bike.collisionCheck 2
pop temp 0
push constant 0
call Screen.setColor 1
pop temp 0
push this 0
push constant 6
add
push this 1
push this 0
push constant 3
sub
push this 1
push constant 3
sub
call Screen.drawLine 4
pop temp 0
push this 0
push constant 3
sub
push this 1
push constant 3
sub
push this 0
push constant 3
sub
push this 1
push constant 3
add
call Screen.drawLine 4
pop temp 0
push this 0
push constant 3
sub
push this 1
push constant 3
add
push this 0
push constant 6
add
push this 1
call Screen.drawLine 4
pop temp 0
push argument 2
push this 0
push constant 4
sub
push this 1
call LinkedList.add 3
pop temp 0
push argument 2
push this 0
push constant 5
sub
push this 1
call LinkedList.add 3
pop temp 0
push constant 0
return
function Bike.moveDown 0
push argument 0
pop pointer 0
push this 1
push constant 1
add
pop this 1
push pointer 0
push argument 1
call Bike.collisionCheck 2
pop temp 0
push this 1
push constant 1
add
pop this 1
push pointer 0
push argument 1
call Bike.collisionCheck 2
pop temp 0
push constant 0
call Screen.setColor 1
pop temp 0
push this 0
push this 1
push constant 6
add
push this 0
push constant 3
sub
push this 1
push constant 3
sub
call Screen.drawLine 4
pop temp 0
push this 0
push constant 3
sub
push this 1
push constant 3
sub
push this 0
push constant 3
add
push this 1
push constant 3
sub
call Screen.drawLine 4
pop temp 0
push this 0
push constant 3
add
push this 1
push constant 3
sub
push this 0
push this 1
push constant 6
add
call Screen.drawLine 4
pop temp 0
push argument 2
push this 0
push this 1
push constant 4
sub
call LinkedList.add 3
pop temp 0
push argument 2
push this 0
push this 1
push constant 5
sub
call LinkedList.add 3
pop temp 0
push constant 0
return
function Bike.moveLeft 0
push argument 0
pop pointer 0
push this 0
push constant 1
sub
pop this 0
push pointer 0
push argument 1
call Bike.collisionCheck 2
pop temp 0
push this 0
push constant 1
sub
pop this 0
push pointer 0
push argument 1
call Bike.collisionCheck 2
pop temp 0
push constant 0
call Screen.setColor 1
pop temp 0
push this 0
push constant 6
sub
push this 1
push this 0
push constant 3
add
push this 1
push constant 3
sub
call Screen.drawLine 4
pop temp 0
push this 0
push constant 3
add
push this 1
push constant 3
sub
push this 0
push constant 3
add
push this 1
push constant 3
add
call Screen.drawLine 4
pop temp 0
push this 0
push constant 3
add
push this 1
push constant 3
add
push this 0
push constant 6
sub
push this 1
call Screen.drawLine 4
pop temp 0
push argument 2
push this 0
push constant 4
add
push this 1
call LinkedList.add 3
pop temp 0
push argument 2
push this 0
push constant 5
add
push this 1
call LinkedList.add 3
pop temp 0
push constant 0
return
function Bike.collisionCheck 7
push argument 0
pop pointer 0
push this 4
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
push constant 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push this 0
pop local 5
push this 1
push constant 7
sub
pop local 6
label IF_FALSE1
push argument 1
push constant 1
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push this 0
push constant 7
add
pop local 5
push this 1
pop local 6
label IF_FALSE2
push argument 1
push constant 2
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push this 0
pop local 5
push this 1
push constant 7
add
pop local 6
label IF_FALSE3
push argument 1
push constant 3
eq
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push this 0
push constant 7
sub
pop local 5
push this 1
pop local 6
label IF_FALSE4
push local 5
push constant 16
call Math.divide 2
pop local 0
push local 5
push local 0
push constant 16
call Math.multiply 2
sub
pop local 1
push constant 16384
push local 6
push constant 32
call Math.multiply 2
push local 0
add
add
pop local 2
push local 2
call Memory.peek 1
pop local 3
push pointer 0
push local 1
call Bike.power 2
pop local 4
push local 3
not
push local 4
and
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push constant 0
pop this 4
label IF_FALSE5
label IF_FALSE0
push constant 0
return
function Bike.hasItCollided 0
push argument 0
pop pointer 0
push this 4
return
function Bike.mod 3
push argument 0
pop pointer 0
push argument 1
push argument 2
call Math.divide 2
pop local 1
push argument 2
push local 1
call Math.multiply 2
pop local 2
push argument 1
push local 2
sub
pop local 0
push local 0
return
function Bike.power 2
push argument 0
pop pointer 0
push argument 1
pop local 0
push constant 1
pop local 1
push local 0
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
return
goto IF_END0
label IF_FALSE0
label WHILE_EXP0
push local 0
push constant 0
gt
not
if-goto WHILE_END0
push local 1
push local 1
add
pop local 1
push local 0
push constant 1
sub
pop local 0
goto WHILE_EXP0
label WHILE_END0
label IF_END0
push local 1
return
function Bike.resetBike 0
push argument 0
pop pointer 0
push this 2
pop this 0
push this 3
pop this 1
push constant 0
not
pop this 4
push constant 0
return
function Bike.dispose 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return

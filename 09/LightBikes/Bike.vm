function Bike.new 0
push constant 3
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 0
push argument 1
pop this 1
push constant 0
not
pop this 2
push pointer 0
return
function Bike.moveUp 0
push argument 0
pop pointer 0
push this 1
push constant 1
sub
pop this 1
push pointer 0
push argument 1
call Bike.collisionCheck 2
pop temp 0
push this 1
push constant 1
sub
pop this 1
push pointer 0
push argument 1
call Bike.collisionCheck 2
pop temp 0
push constant 0
call Screen.setColor 1
pop temp 0
push this 0
push this 1
push constant 6
sub
push this 0
push constant 3
sub
push this 1
push constant 3
add
call Screen.drawLine 4
pop temp 0
push this 0
push constant 3
sub
push this 1
push constant 3
add
push this 0
push constant 3
add
push this 1
push constant 3
add
call Screen.drawLine 4
pop temp 0
push this 0
push constant 3
add
push this 1
push constant 3
add
push this 0
push this 1
push constant 6
sub
call Screen.drawLine 4
pop temp 0
push constant 0
return
function Bike.moveRight 0
push argument 0
pop pointer 0
push this 0
push constant 1
add
pop this 0
push pointer 0
push argument 1
call Bike.collisionCheck 2
pop temp 0
push this 0
push constant 1
add
pop this 0
push pointer 0
push argument 1
call Bike.collisionCheck 2
pop temp 0
push constant 0
call Screen.setColor 1
pop temp 0
push this 0
push constant 6
add
push this 1
push this 0
push constant 3
sub
push this 1
push constant 3
sub
call Screen.drawLine 4
pop temp 0
push this 0
push constant 3
sub
push this 1
push constant 3
sub
push this 0
push constant 3
sub
push this 1
push constant 3
add
call Screen.drawLine 4
pop temp 0
push this 0
push constant 3
sub
push this 1
push constant 3
add
push this 0
push constant 6
add
push this 1
call Screen.drawLine 4
pop temp 0
push constant 0
return
function Bike.moveDown 0
push argument 0
pop pointer 0
push this 1
push constant 1
add
pop this 1
push pointer 0
push argument 1
call Bike.collisionCheck 2
pop temp 0
push this 1
push constant 1
add
pop this 1
push pointer 0
push argument 1
call Bike.collisionCheck 2
pop temp 0
push constant 0
call Screen.setColor 1
pop temp 0
push this 0
push this 1
push constant 6
add
push this 0
push constant 3
sub
push this 1
push constant 3
sub
call Screen.drawLine 4
pop temp 0
push this 0
push constant 3
sub
push this 1
push constant 3
sub
push this 0
push constant 3
add
push this 1
push constant 3
sub
call Screen.drawLine 4
pop temp 0
push this 0
push constant 3
add
push this 1
push constant 3
sub
push this 0
push this 1
push constant 6
add
call Screen.drawLine 4
pop temp 0
push constant 0
return
function Bike.moveLeft 0
push argument 0
pop pointer 0
push this 0
push constant 1
sub
pop this 0
push pointer 0
push argument 1
call Bike.collisionCheck 2
pop temp 0
push this 0
push constant 1
sub
pop this 0
push pointer 0
push argument 1
call Bike.collisionCheck 2
pop temp 0
push constant 0
call Screen.setColor 1
pop temp 0
push this 0
push constant 6
sub
push this 1
push this 0
push constant 3
add
push this 1
push constant 3
sub
call Screen.drawLine 4
pop temp 0
push this 0
push constant 3
add
push this 1
push constant 3
sub
push this 0
push constant 3
add
push this 1
push constant 3
add
call Screen.drawLine 4
pop temp 0
push this 0
push constant 3
add
push this 1
push constant 3
add
push this 0
push constant 6
sub
push this 1
call Screen.drawLine 4
pop temp 0
push constant 0
return
function Bike.collisionCheck 0
push argument 0
pop pointer 0
push this 2
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
push constant 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 16384
push this 1
push constant 7
sub
push constant 32
call Math.multiply 2
add
push this 0
push constant 16
call Math.divide 2
add
push pointer 0
push this 0
push constant 16
call Bike.mod 3
add
call Memory.peek 1
pop this 2
label IF_FALSE1
push argument 1
push constant 1
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 16384
push this 1
push constant 32
call Math.multiply 2
add
push this 0
push constant 7
add
push constant 16
call Math.divide 2
add
push pointer 0
push this 0
push constant 7
add
push constant 16
call Bike.mod 3
add
call Memory.peek 1
pop this 2
label IF_FALSE2
push argument 1
push constant 2
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 16384
push this 1
push constant 7
add
push constant 32
call Math.multiply 2
add
push this 0
push constant 16
call Math.divide 2
add
push pointer 0
push this 0
push constant 16
call Bike.mod 3
add
call Memory.peek 1
pop this 2
label IF_FALSE3
push argument 1
push constant 3
eq
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 16384
push this 1
push constant 32
call Math.multiply 2
add
push this 0
push constant 7
sub
push constant 16
call Math.divide 2
add
push pointer 0
push this 0
push constant 7
sub
push constant 16
call Bike.mod 3
add
call Memory.peek 1
pop this 2
goto IF_END4
label IF_FALSE4
label IF_END4
label IF_FALSE0
push constant 0
return
function Bike.hasItCollided 0
push argument 0
pop pointer 0
push this 2
return
function Bike.mod 3
push argument 0
pop pointer 0
push argument 1
push argument 2
call Math.divide 2
pop local 1
push argument 2
push local 1
call Math.multiply 2
pop local 2
push argument 1
push local 2
sub
pop local 0
push local 0
return

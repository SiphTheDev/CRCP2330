// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:
    // Put your code here:

    //current bug  -  It doesn't want the result updated on the specific iteration that an input is changed, but rather on the next iteration after it has been changed.
    //Does that mean this whole thing needs to be contained in a sort of jumbo bit (or register, actually - as 16bit in/out).


    Inc16(in = in, out = incrementedIn);
    Mux16(a = in, b = incrementedIn, sel = inc, out = incremPhaseOut);

    Mux16(a = incremPhaseOut, b = false, sel = reset, out = resetOut);

    Register(in = resetOut, load = load, out = out);




	//Register(in = incremPhaseOut, load = load, out = loadIn); //bug here?
    //Mux16(a = incremPhaseOut, b = loadIn, sel = load, out = loadPhaseOut); //might be redundant.



    //Alternate Order of Operations (ignore if system works);
    //Mux16(a = in, b = false, sel = reset, out = resetPhaseOut);

    //Register(in = resetPhaseOut, load = load, out = loadPhaseOut);

    //Inc16(in = loadPhaseOut, out = incrementedOut);
    //Mux16(a = loadPhaseOut, b = incrementedOut, sel = inc, out = out);
}
